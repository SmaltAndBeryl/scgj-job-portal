adminFaq: 

 getTotalJobsPostedByEmployer: select count(id) from job_postings where posted_by=:employerId and job_status!=:jobStatusNotPublished and job_approval_status=:jobStatusApproved and active_flg=:activeFlagTrue;
 companyWiseHiredShortlistedCandidates: select (select a.id from users as a where a.id=cm.candidate_id) as id, jp.job_id, jp.job_title, jp.job_description_path, (select a.username from users as a where a.id=cm.candidate_id) as candidateName, (select a.mobile_number from users as a where a.id=cm.candidate_id) as mobileNumber, (select c.guardian_mobile_number from candidates as c where c.user_id=cm.candidate_id) as guardianNumber, cm.status as jobStatus from users as u inner join job_postings as jp on u.id = jp.posted_by inner join job_candidate_mapping cm on jp.id = cm.job_id inner join candidates as c on c.user_id = cm.candidate_id where job_role =:jobrole and posted_by=:employerUserId and jp.job_approval_status=:jobApprovalStatusApproved and jp.active_flg=:activeFlagTrue and jp.job_status!=:jobStatusNotPublished and cm.status in (:jobStatusShorlisted,:jobStatusHired) and cm.updated_on between :startDate and :endDate;
 employersDetailsWithJobCount: select u.id, u.username, u.mobile_number, e.email_address, e.liasing_authority, a.job_count as totalJobListings from users as u join job_postings as jp on u.id = jp.posted_by inner join (select count(b.id) as job_count, posted_by from users as a join job_postings as b on a.id=b.posted_by where a.enrolment_status=:employerEnrolmentStatus and a.is_active_flg=:activeFlagTrue and job_status !=:jobStatusNotPublished and job_approval_status =:jobStatusApproved and active_flg=:activeFlagTrue and job_role=:jobrole and occupation =:occupation and approval_status_updated_on between :startDate and :endDate group by posted_by) as a on jp.posted_by = a.posted_by inner join employer as e on a.posted_by = e.user_id where a.job_count>:minJobCount group by jp.posted_by;
 countJobroleSpecificHiredCandidates: select count(distinct cm.candidate_id) from job_postings as jp join job_candidate_mapping as cm on jp.id = cm.job_id where jp.job_role =:jobrole and jp.active_flg =:activeFlagTrue and jp.job_approval_status=:jobStatusApproved and jp.job_status !=:jobStatusNotPublished and cm.status=:jobApplicationStatusHired and cm.updated_on between :startDate and :endDate;
 countStateWiseHiredCandidates: select count(distinct cm.candidate_id) from job_postings as jp join job_candidate_mapping as cm on jp.id = cm.job_id join users as u on cm.candidate_id = u.id where jp.job_role =:jobrole and u.state=:state and jp.job_approval_status=:jobStatusApproved and jp.active_flg=:activeFlagTrue and jp.job_status !=:jobStatusNotPublished and cm.status=:jobApplicationStatusHired and cm.updated_on between :startDate and :endDate;
 countJobroleSpecificJobPostings: select count(jp.id) from users as u join job_postings as jp on u.id = jp.posted_by where u.is_active_flg=:activeFlagTrue and u.enrolment_status=:enrolmentStatusApproved and job_role=:jobrole and job_status!=:jobStatusNotPublished and active_flg=:activeFlagTrue and job_approval_status=:jobApprovalStatusApproved;
 countHiredCGSCCertifiedCandidates: select count(distinct cm.candidate_id) from candidates as c join job_candidate_mapping as cm on c.user_id=cm.candidate_id where c.is_cgsc_certified =:trueFlag and cm.status=:statusHired and cm.updated_on between :startDate and :endDate;
 countInactiveEmployers: select count(id) from (select u.id as id from users as u where user_role=:userRoleEmployer and is_active_flg=:activeFlagTrue and enrolment_status=:enrolmentStatusApproved) as a where a.id not in (select distinct(posted_by) as id from job_postings as jp where jp.job_approval_status =:jobApprovalStatusApproved and jp.published_at between :startDate and :endDate);
 getHiredCandidateCount: SELECT COUNT(DISTINCT candidate_id) FROM job_candidate_mapping as jcm INNER JOIN job_postings as jp on jcm.job_id=jp.id WHERE jcm.updated_on BETWEEN :startDate AND :endDate AND jcm.status=:hiredStatus AND jp.active_flg=:trueFlag AND jp.job_approval_status=:approvedStatus AND jp.job_status IN (:publishedStatus, :closedStatus);
 countTotalVacanciesInState: select sum(total_vacancy) from job_postings as jp inner join users as u on jp.posted_by = u.id where jp.state=:state and jp.job_approval_status=:jobStatuApproved and jp.job_status in (:jobStatusPublished,:jobStatusClosed) and jp.active_flg=:activeFlagTrue and jp.approval_status_updated_on between :startDate and :endDate and u.enrolment_status=:enrollmentStatusApproved; 
